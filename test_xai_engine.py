
#!/usr/bin/env python3
"""
Test para el Motor de IA Explicable (XAI)
Verifica que las explicaciones SHAP se generen correctamente.
"""

import asyncio
from explanation_engine import generate_explanation, get_explanation, test_explanation_engine


async def test_xai_integration():
    """
    Prueba la integraci√≥n completa del motor XAI.
    """
    print("üîç PRUEBA COMPLETA DEL MOTOR XAI")
    print("="*60)
    
    # Datos de prueba realistas
    test_scenarios = [
        {
            'name': 'Se√±al Alcista Fuerte',
            'inputs': {
                'trigger': 'RSI en sobreventa (22.5)',
                'cognitive': 'An√°lisis Cognitivo (Gemini): Muy positivo',
                'predictive': {'prediction': 'Alcista', 'confidence': 0.85},
                'macro_context': 'Sentimiento: Positivo - Pol√≠ticas expansivas favorable',
                'social_sentiment': 'Pulso Social: Euf√≥rico',
                'causal': 'An√°lisis Causal: Alta causalidad - Score: 0.75',
                'correlation': 'Correlaci√≥n: Favorable',
                'rlhf': 'Confianza del operador: 0.9',
                'multimodal': 'An√°lisis Multimodal: Confianza detectada en video'
            },
            'decision': 'COMPRAR'
        },
        {
            'name': 'Se√±al Bajista Fuerte', 
            'inputs': {
                'trigger': 'RSI en sobrecompra (78.2)',
                'cognitive': 'An√°lisis Cognitivo (Gemini): Muy negativo',
                'predictive': {'prediction': 'Bajista', 'confidence': 0.80},
                'macro_context': 'Sentimiento: Negativo - Pol√≠ticas restrictivas',
                'social_sentiment': 'Pulso Social: P√°nico',
                'causal': 'An√°lisis Causal: Causalidad moderada - Score: 0.65',
                'correlation': 'Correlaci√≥n: Desfavorable',
                'rlhf': 'Confianza del operador: 0.8',
                'multimodal': 'An√°lisis Multimodal: Nerviosismo detectado'
            },
            'decision': 'VENDER'
        },
        {
            'name': 'Se√±al Mixta',
            'inputs': {
                'trigger': 'RSI neutral (45.0)',
                'cognitive': 'An√°lisis Cognitivo (Gemini): Neutral',
                'predictive': {'prediction': 'Plana', 'confidence': 0.55},
                'macro_context': 'Sentimiento: Neutral - Incertidumbre',
                'social_sentiment': 'Pulso Social: Neutral',
                'causal': 'An√°lisis Causal: Baja causalidad - Score: 0.25',
                'correlation': 'Correlaci√≥n: Neutral',
                'rlhf': 'Confianza del operador: 0.5',
                'multimodal': 'An√°lisis Multimodal: Sin datos relevantes'
            },
            'decision': 'NO OPERAR'
        }
    ]
    
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\nüß™ ESCENARIO {i}: {scenario['name']}")
        print("-" * 40)
        
        signal_id = f"test-signal-{i:03d}"
        
        # Generar explicaci√≥n
        explanation = generate_explanation(
            scenario['inputs'], 
            scenario['decision'], 
            signal_id
        )
        
        print(f"‚úÖ Explicaci√≥n generada para {signal_id}")
        print(f"üéØ Decisi√≥n: {explanation.get('decision', 'N/A')}")
        print(f"üìä Factores: {len(explanation.get('feature_names', []))}")
        
        # Verificar que se pueden recuperar
        retrieved = get_explanation(signal_id)
        if retrieved:
            print(f"‚úÖ Explicaci√≥n recuperada correctamente")
        else:
            print(f"‚ùå Error recuperando explicaci√≥n")
        
        # Mostrar interpretaci√≥n
        interpretation = explanation.get('interpretation', 'No disponible')
        print(f"üìù Interpretaci√≥n:\n{interpretation[:200]}...")
        
        # Verificar que los gr√°ficos se generaron
        charts = ['force_plot', 'waterfall_chart', 'feature_importance']
        chart_status = []
        for chart in charts:
            if chart in explanation and explanation[chart]:
                chart_status.append(f"‚úÖ {chart}")
            else:
                chart_status.append(f"‚ùå {chart}")
        
        print(f"üìà Gr√°ficos: {', '.join(chart_status)}")
    
    print("\n" + "="*60)
    print("üéâ PRUEBA DEL MOTOR XAI COMPLETADA")
    print("="*60)


def test_api_endpoint():
    """
    Prueba el endpoint de API para explicaciones.
    """
    print("\nüåê PRUEBA DEL ENDPOINT API")
    print("-" * 40)
    
    import requests
    
    try:
        # Generar una explicaci√≥n de prueba
        test_inputs = {
            'trigger': 'RSI en sobreventa (20.0)',
            'cognitive': 'Positivo',
            'predictive': {'prediction': 'Alcista', 'confidence': 0.7},
            'macro_context': 'Favorable',
            'social_sentiment': 'Optimista',
            'causal': 'Score: 0.6',
            'correlation': 'Favorable',
            'rlhf': 'Confianza: 0.8',
            'multimodal': 'Positivo'
        }
        
        signal_id = "api-test-signal"
        generate_explanation(test_inputs, 'COMPRAR', signal_id)
        
        # Probar el endpoint
        url = f"http://0.0.0.0:5000/api/get_explanation/{signal_id}"
        response = requests.get(url, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Endpoint API funcionando correctamente")
            print(f"üìä Status: {data.get('status', 'N/A')}")
            print(f"üéØ Decisi√≥n en respuesta: {data.get('explanation', {}).get('decision', 'N/A')}")
        else:
            print(f"‚ùå Error en endpoint: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error probando endpoint: {e}")


async def main():
    """
    Funci√≥n principal de pruebas.
    """
    print("üîç SISTEMA DE PRUEBAS PARA MOTOR XAI")
    print("="*60)
    
    # Prueba b√°sica del motor
    test_explanation_engine()
    
    # Prueba de integraci√≥n completa
    await test_xai_integration()
    
    # Prueba del endpoint API
    test_api_endpoint()
    
    print("\nüéä TODAS LAS PRUEBAS COMPLETADAS")


if __name__ == "__main__":
    asyncio.run(main())
